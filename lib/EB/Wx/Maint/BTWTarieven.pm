# generated by wxGlade 0.4cvs*** on Tue Aug 16 11:57:27 2005
# To get wxPerl visit http://wxPerl.sourceforge.net/

package main;

our $dbh;
our $config;
our $app;

use Wx 0.15 qw[:allclasses];
use strict;

package BtwPanel;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;

use EB::Globals;
use EB::Finance;

# begin wxGlade: ::dependencies
use Wx::Grid;
use AccInput;
use NumericCtrl;
# end wxGlade

sub new {
	my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
	$parent = undef              unless defined $parent;
	$id     = -1                 unless defined $id;
	$title  = ""                 unless defined $title;
	$pos    = wxDefaultPosition  unless defined $pos;
	$size   = wxDefaultSize      unless defined $size;
	$name   = ""                 unless defined $name;

# begin wxGlade: BtwPanel::new

	$style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME 
		unless defined $style;

	$self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
	$self->{sz_btw_staticbox} = Wx::StaticBox->new($self, -1, "BTW Tariefcodes" );
	$self->{sz_btg_staticbox} = Wx::StaticBox->new($self, -1, "Koppelingen" );
	$self->{btwpanel} = Wx::ScrolledWindow->new($self, -1, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
	$self->{bl_code} = Wx::StaticText->new($self->{btwpanel}, -1, "Code", wxDefaultPosition, wxDefaultSize, );
	$self->{bl_desc} = Wx::StaticText->new($self->{btwpanel}, -1, "Omschrijving", wxDefaultPosition, wxDefaultSize, );
	$self->{bl_group} = Wx::StaticText->new($self->{btwpanel}, -1, "Groep", wxDefaultPosition, wxDefaultSize, );
	$self->{bl_incl} = Wx::StaticText->new($self->{btwpanel}, -1, "In/Excl", wxDefaultPosition, wxDefaultSize, );
	$self->{bw_new} = Wx::Button->new($self, wxID_NEW, "New");
	$self->{bw_remove} = Wx::Button->new($self, wxID_REMOVE, "Remove");
	$self->{bw_apply} = Wx::Button->new($self, wxID_APPLY, "Apply");
	$self->{bw_reset} = Wx::Button->new($self, wxID_UNDO, "Undo");
	$self->{static_line_1} = Wx::StaticLine->new($self, -1, wxDefaultPosition, wxDefaultSize, );
	$self->{l_btg_hi} = Wx::StaticText->new($self, -1, "BTW Inkoop Hoog", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_btg_hi} = Wx::TextCtrl->new($self, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_btg_hv} = Wx::StaticText->new($self, -1, "BTW Verkoop Hoog", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_btg_hv} = Wx::TextCtrl->new($self, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_btg_li} = Wx::StaticText->new($self, -1, "BTW Inkoop Laag", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_btg_li} = Wx::TextCtrl->new($self, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_btg_lv} = Wx::StaticText->new($self, -1, "BTW Verkoop Laag", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_btg_lv} = Wx::TextCtrl->new($self, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_btw_ok} = Wx::StaticText->new($self, -1, "BTW Betaald", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_btw_ok} = Wx::TextCtrl->new($self, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_locked} = Wx::TextCtrl->new($self, -1, "De administratie is in gebruik. De koppelingen kunnen niet meer worden gewijzigd.", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
	$self->{bg_apply} = Wx::Button->new($self, wxID_APPLY, "Apply");
	$self->{bg_reset} = Wx::Button->new($self, wxID_UNDO, "Undo");
	$self->{b_cancel} = Wx::Button->new($self, wxID_CLOSE, "Close");

	$self->__set_properties();
	$self->__do_layout();

	Wx::Event::EVT_BUTTON($self, wxID_NEW, \&OnTNew);
	Wx::Event::EVT_BUTTON($self, wxID_REMOVE, \&OnTRemove);
	Wx::Event::EVT_BUTTON($self, wxID_APPLY, \&OnTApply);
	Wx::Event::EVT_BUTTON($self, wxID_UNDO, \&OnTReset);
	Wx::Event::EVT_TEXT($self, $self->{tx_btg_hi}->GetId, \&OnGChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_btg_hv}->GetId, \&OnGChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_btg_li}->GetId, \&OnGChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_btg_lv}->GetId, \&OnGChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_btw_ok}->GetId, \&OnGChanged);
	Wx::Event::EVT_BUTTON($self, wxID_APPLY, \&OnGApply);
	Wx::Event::EVT_BUTTON($self, wxID_UNDO, \&OnGReset);
	Wx::Event::EVT_BUTTON($self, wxID_CLOSE, \&OnClose);

# end wxGlade

	Wx::Event::EVT_IDLE($self, \&OnIdle);

	$self->wrefresh;
	my $ch = $self->wchanged;
	$self->{bw_apply}->Enable($ch);
	$self->{bw_reset}->Enable($ch);

	$self->grefresh;
	unless ( $self->{_open} ) {
	    $ch = $self->gchanged;
	    $self->{bg_apply}->Enable($ch);
	    $self->{bg_reset}->Enable($ch);
	}

	return $self;

}

sub OnIdle {
    my ($self) = @_;
    return unless $self->{_check_changed};
    $self->{_check_changed} = 0;
    my $ch = $self->wchanged;
    $self->{bw_apply}->Enable($ch);
    $self->{bw_reset}->Enable($ch);
    $ch = $self->gchanged;
    $self->{bg_apply}->Enable($ch);
    $self->{bg_reset}->Enable($ch);
}

sub grefresh {
    my ($self) = @_;
    local($self->{busy}) = 1;
    my ($ih, $il, $vh, $vl, $ok) = @{$self}{qw(_btg_hi _btg_li _btg_hv _btg_lv _btw_ok)};
    my $accts = $dbh->accts;
    $self->{tx_btg_hi}->SetValue($ih . "   " . $accts->{$ih});
    $self->{tx_btg_li}->SetValue($il . "   " . $accts->{$il});
    $self->{tx_btg_hv}->SetValue($vh . "   " . $accts->{$vh});
    $self->{tx_btg_lv}->SetValue($vl . "   " . $accts->{$vl});
    $self->{tx_btw_ok}->SetValue($ok . "   " . $accts->{$ok});
}

sub gchanged {
    my $self = shift;
    return 0 if $self->{busy};
    return 1 if (split(' ', $self->{tx_btg_hi}->GetValue))[0] != $self->{_btg_hi};
    return 1 if (split(' ', $self->{tx_btg_li}->GetValue))[0] != $self->{_btg_li};
    return 1 if (split(' ', $self->{tx_btg_hv}->GetValue))[0] != $self->{_btg_hv};
    return 1 if (split(' ', $self->{tx_btg_lv}->GetValue))[0] != $self->{_btg_lv};
    return 1 if (split(' ', $self->{tx_btw_ok}->GetValue))[0] != $self->{_btw_ok};
    return 0;
}

sub wrefresh {
    my $self = shift;
    local($self->{busy}) = 1;
}

sub wchanged {
    my $self = shift;
    return 0 if $self->{busy};
    # ...
    return 0;
}

sub __set_properties {
	my $self = shift;

# begin wxGlade: BtwPanel::__set_properties

	$self->SetTitle("BTW Tarieven");
	$self->{btwpanel}->SetScrollRate(10, 10);
	$self->{bw_remove}->Enable(0);
	$self->{tx_locked}->Enable(0);
	$self->{tx_locked}->Show(0);
	$self->{b_cancel}->SetFocus();
	$self->{b_cancel}->SetDefault();

# end wxGlade

	$self->{mew} = "btww";

	@{$self}{qw(_btg_hi _btg_hv _btg_li _btg_lv _btw_ok)} =
	  @{$dbh->do("SELECT std_acc_btw_ih, std_acc_btw_vh,".
		      " std_acc_btw_il, std_acc_btw_vl, std_acc_btw_ok".
		      " FROM Standaardrekeningen")};

	$self->{busy} = 0;

	$self->{_open} = $dbh->do("SELECT adm_opened FROM Metadata")->[0];

	if ( $self->{_open} ) {
	    for ( qw(btg_hi btg_li btg_hv btg_lv btw_ok) ) {
		$self->{"l_$_"}->Enable(0);
		$self->{"tx_$_"}->Enable(0);
	    }
	}
	else {
	    for ( qw(btg_hi btg_li btg_hv btg_lv btw_ok) ) {
		$self->{"tx_$_"}->Destroy;
		$self->{"tx_$_"} = AccInput->new($self, -1, "", wxDefaultPosition, wxDefaultSize, );
	    }
	}

	$self->{_btw} = [];
	my $sth = $dbh->sql_exec("SELECT btw_id, btw_desc, btw_tariefgroep, btw_incl".
				 " FROM BTWTabel".
				 " ORDER BY btw_id");
	while ( my $rr = $sth->fetchrow_arrayref ) {
	    push(@{$self->{_btw}}, [@$rr]);
	    my ($id, $desc, $tg, $incl) = @$rr;
	    $self->{"tx_btw_id_$id"} = Wx::TextCtrl->new($self->{btwpanel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	    $self->{"tx_btw_dc_$id"} = Wx::TextCtrl->new($self->{btwpanel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	    $self->{"tx_btw_tg_$id"} = Wx::Choice->new($self->{btwpanel}, -1, wxDefaultPosition, wxDefaultSize, BTWTYPES);
	    $self->{"tx_btw_in_$id"} = Wx::Choice->new($self->{btwpanel}, -1, wxDefaultPosition, wxDefaultSize, [qw(Incl Excl)]);
	}
	$sth->finish;
}

sub __do_layout {
	my $self = shift;

# begin wxGlade: BtwPanel::__do_layout

	$self->{sz_btwpanel} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{sz_btwmain} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{sz_buttons} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{sz_btg}= Wx::StaticBoxSizer->new($self->{sz_btg_staticbox}, wxVERTICAL);
	$self->{sz_btg_buttons} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{sz_btgh} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{sz_g_btgh} = Wx::FlexGridSizer->new(5, 2, 3, 5);
	$self->{sz_btw}= Wx::StaticBoxSizer->new($self->{sz_btw_staticbox}, wxVERTICAL);
	$self->{sz_btw_buttons} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{sz_btws} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{sz_g_btw} = Wx::FlexGridSizer->new(1, 4, 0, 0);
	$self->{sz_g_btw}->Add($self->{bl_code}, 0, wxLEFT|wxEXPAND|wxADJUST_MINSIZE, 5);
	$self->{sz_g_btw}->Add($self->{bl_desc}, 1, wxLEFT|wxEXPAND|wxADJUST_MINSIZE, 5);
	$self->{sz_g_btw}->Add($self->{bl_group}, 0, wxLEFT|wxEXPAND|wxADJUST_MINSIZE, 5);
	$self->{sz_g_btw}->Add($self->{bl_incl}, 0, wxLEFT|wxEXPAND|wxADJUST_MINSIZE, 5);
	$self->{sz_g_btw}->AddGrowableCol(1);
	$self->{sz_btws}->Add($self->{sz_g_btw}, 0, wxALL|wxEXPAND, 5);
	$self->{btwpanel}->SetAutoLayout(1);
	$self->{btwpanel}->SetSizer($self->{sz_btws});
	$self->{sz_btws}->Fit($self->{btwpanel});
	$self->{sz_btws}->SetSizeHints($self->{btwpanel});
	$self->{sz_btw}->Add($self->{btwpanel}, 1, wxEXPAND, 0);
	$self->{sz_btw_buttons}->Add($self->{bw_new}, 0, wxRIGHT|wxADJUST_MINSIZE, 5);
	$self->{sz_btw_buttons}->Add($self->{bw_remove}, 0, wxRIGHT|wxADJUST_MINSIZE, 5);
	$self->{sz_btw_buttons}->Add($self->{bw_apply}, 0, wxADJUST_MINSIZE, 0);
	$self->{sz_btw_buttons}->Add(20, 20, 1, wxADJUST_MINSIZE, 0);
	$self->{sz_btw_buttons}->Add($self->{bw_reset}, 0, wxADJUST_MINSIZE, 0);
	$self->{sz_btw}->Add($self->{sz_btw_buttons}, 0, wxALL|wxEXPAND, 5);
	$self->{sz_btwmain}->Add($self->{sz_btw}, 2, wxEXPAND, 0);
	$self->{sz_btwmain}->Add($self->{static_line_1}, 0, wxTOP|wxBOTTOM|wxEXPAND, 5);
	$self->{sz_g_btgh}->Add($self->{l_btg_hi}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_btgh}->Add($self->{tx_btg_hi}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_btgh}->Add($self->{l_btg_hv}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_btgh}->Add($self->{tx_btg_hv}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_btgh}->Add($self->{l_btg_li}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_btgh}->Add($self->{tx_btg_li}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_btgh}->Add($self->{l_btg_lv}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_btgh}->Add($self->{tx_btg_lv}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_btgh}->Add($self->{l_btw_ok}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_btgh}->Add($self->{tx_btw_ok}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_btgh}->AddGrowableCol(1);
	$self->{sz_btgh}->Add($self->{sz_g_btgh}, 0, wxALL|wxEXPAND, 5);
	$self->{sz_btg}->Add($self->{sz_btgh}, 1, wxEXPAND, 0);
	$self->{sz_btg}->Add($self->{tx_locked}, 0, wxALL|wxEXPAND|wxADJUST_MINSIZE|wxFIXED_MINSIZE, 5);
	$self->{sz_btg_buttons}->Add($self->{bg_apply}, 0, wxADJUST_MINSIZE, 0);
	$self->{sz_btg_buttons}->Add(20, 20, 1, wxADJUST_MINSIZE, 0);
	$self->{sz_btg_buttons}->Add($self->{bg_reset}, 0, wxADJUST_MINSIZE, 0);
	$self->{sz_btg}->Add($self->{sz_btg_buttons}, 0, wxALL|wxEXPAND, 5);
	$self->{sz_btwmain}->Add($self->{sz_btg}, 0, wxEXPAND, 0);
	$self->{sz_btwmain}->Add(20, 5, 0, wxEXPAND, 0);
	$self->{sz_buttons}->Add(20, 20, 1, wxEXPAND|wxADJUST_MINSIZE, 0);
	$self->{sz_buttons}->Add($self->{b_cancel}, 0, wxEXPAND|wxADJUST_MINSIZE|wxFIXED_MINSIZE, 5);
	$self->{sz_btwmain}->Add($self->{sz_buttons}, 0, wxALL|wxEXPAND, 5);
	$self->{sz_btwpanel}->Add($self->{sz_btwmain}, 1, wxALL|wxEXPAND, 5);
	$self->SetAutoLayout(1);
	$self->SetSizer($self->{sz_btwpanel});
	$self->{sz_btwpanel}->Fit($self);
	$self->{sz_btwpanel}->SetSizeHints($self);
	$self->Layout();

# end wxGlade

	if ( $self->{_open} ) {
	    $self->{sz_btg}->Show($self->{tx_locked}, 1);
	    $self->{sz_btg}->Show($self->{sz_btg_buttons}, 0);
#	    $self->{sz_btg}->Layout;
	}
	else {
	    $self->{sz_btg}->Show($self->{tx_locked}, 0);
	    $self->{sz_btg}->Show($self->{sz_btg_buttons}, 1);
#	    $self->{sz_btg}->Layout;
	}

	my $btw = $self->{_btw};
	foreach ( @$btw ) {
	    my ($id, $desc, $groep, $incl) = @$_;
	    $self->{"sz_btw_$id"} = Wx::BoxSizer->new(wxHORIZONTAL);
	    $self->{"tx_btw_id_$id"}->SetValue($id);
	    $self->{"tx_btw_dc_$id"}->SetValue($desc);
	    $self->{"tx_btw_tg_$id"}->SetSelection($groep);
	    #$self->{"tx_btw_in_$id"}->SetValue($incl);
	    $self->{"tx_btw_in_$id"}->SetSelection(1 - ($incl||0));
	    $self->{"tx_btw_in_$id"}->Enable(0) if $groep == BTWTYPE_GEEN;

	    $self->{"sz_g_btw"}->Add($self->{"tx_btw_id_$id"}, 0, wxEXPAND|wxADJUST_MINSIZE, 0);
	    $self->{"sz_g_btw"}->Add($self->{"tx_btw_dc_$id"}, 1, wxEXPAND|wxADJUST_MINSIZE, 0);
	    $self->{"sz_g_btw"}->Add($self->{"tx_btw_tg_$id"}, 0, wxEXPAND|wxADJUST_MINSIZE, 0);
	    $self->{"sz_g_btw"}->Add($self->{"tx_btw_in_$id"}, 0, wxEXPAND|wxADJUST_MINSIZE, 0);

	    Wx::Event::EVT_TEXT($self, $self->{"tx_btw_id_$id"}->GetId, sub { $_[0]->OnGIdChanged($_[1], $id) });
	    Wx::Event::EVT_TEXT($self, $self->{"tx_btw_dc_$id"}->GetId, sub { $_[0]->OnGDcChanged($_[1], $id) });
	    Wx::Event::EVT_CHOICE($self, $self->{"tx_btw_tg_$id"}->GetId, sub { $_[0]->OnGTgChanged($_[1], $id) });
	    Wx::Event::EVT_CHOICE($self, $self->{"tx_btw_in_$id"}->GetId, sub { $_[0]->OnGInChanged($_[1], $id) });
	}

	$self->Layout();

}

sub OnGIdChanged {
    my ($self, $event, $id) = @_;
    warn("Id change for $id\n");
    if ( $dbh->do("SELECT COUNT(*) FROM Boekstukregels WHERE bsr_btw_id = ?", $id) ) {
    }
}

sub OnGInChanged {
    my ($self, $event, $id) = @_;
    warn("In/Ex change for $id\n");
}

sub OnGTgChanged {
    my ($self, $event, $id) = @_;
    warn("Group change for $id\n");
}

sub OnGDcChanged {
    my ($self, $event, $id) = @_;
    warn("Desc change for $id\n");
}

# wxGlade: BtwPanel::OnTNew <event_handler>
sub OnTNew {
    my ($self, $event) = @_;
    $event->Skip;
}

# wxGlade: BtwPanel::OnTRemove <event_handler>
sub OnTRemove {
    my ($self, $event) = @_;
    $event->Skip;
}

# wxGlade: BtwPanel::OnTApply <event_handler>
sub OnTApply {
    my ($self, $event) = @_;
    $event->Skip;
}

# wxGlade: BtwPanel::OnTReset <event_handler>
sub OnTReset {
    my ($self, $event) = @_;
    $self->wrefresh;
}

# wxGlade: BtwPanel::OnGApply <event_handler>
sub OnGApply {
    my ($self, $event) = @_;
    my @set;
    my $t;
    if ( ($t = (split(' ', $self->{tx_btg_hi}->GetValue))[0]) != $self->{_btg_hi} ) {
	push(@set, "std_acc_btw_ih = $t");
	$dbh->sql_exec("UPDATE BTWTariefgroepen".
		       " SET btg_acc_inkoop = ?".
		       " WHERE btg_id = ?", $t, BTWTYPE_HOOG)->finish;
    }
    if ( ($t = (split(' ', $self->{tx_btg_li}->GetValue))[0]) != $self->{_btg_li} ) {
	push(@set, "std_acc_btw_il = $t");
	$dbh->sql_exec("UPDATE BTWTariefgroepen".
		       " SET btg_acc_inkoop = ?".
		       " WHERE btg_id = ?", $t, BTWTYPE_LAAG)->finish;
    }
    if ( ($t = (split(' ', $self->{tx_btg_hv}->GetValue))[0]) != $self->{_btg_hv} ) {
	push(@set, "std_acc_btw_vh = $t");
	$dbh->sql_exec("UPDATE BTWTariefgroepen".
		       " SET btg_acc_verkoop = ?".
		       " WHERE btg_id = ?", $t, BTWTYPE_HOOG)->finish;
    }
    if ( ($t = (split(' ', $self->{tx_btg_lv}->GetValue))[0]) != $self->{_btg_lv} ) {
	push(@set, "std_acc_btw_vl = $t");
	$dbh->sql_exec("UPDATE BTWTariefgroepen".
		       " SET btg_acc_verkoop = ?".
		       " WHERE btg_id = ?", $t, BTWTYPE_LAAG)->finish;
    }
    if ( ($t = (split(' ', $self->{tx_btw_ok}->GetValue))[0]) != $self->{_btw_ok} ) {
	push(@set, "std_acc_btw_ok = $t");
    }

    if ( @set ) {
	$dbh->sql_exec("UPDATE Standaardrekeningen SET ".
		       join(", ", @set))->finish;
	$dbh->commit;
	$self->{"_$_"} = (split(' ',$self->{"tx_$_"}->GetValue))[0] for qw(btg_hi btg_li btg_hv btg_lv btw_ok);
	$self->{_check_changed} = 1;
    }
}

# wxGlade: BtwPanel::OnGReset <event_handler>
sub OnGReset {
    my ($self, $event) = @_;
    $self->grefresh;
}

# wxGlade: BtwPanel::OnClose <event_handler>
sub OnClose {
    my ($self, $event) = @_;
    if ( $self->wchanged || $self->gchanged ) {
	my $r = Wx::MessageBox("Er zijn nog wijzigingen, deze zullen verloren gaan.\n".
			       "Venster toch sluiten?",
			       "Annuleren",
			       wxYES_NO|wxNO_DEFAULT|wxICON_ERROR);
	return unless $r == wxYES;
	$self->OnGReset;
    }
    # Remember position and size.
    @{$config->get($self->{mew})}{qw(xpos ypos xwidth ywidth)} = ($self->GetPositionXY, $self->GetSizeWH);
    # Disappear.
    $self->Show(0);

}

# wxGlade: BtwPanel::OnGChanged <event_handler>
sub OnGChanged {
    my ($self, $event) = @_;
    $self->{_check_changed} = 1;
}

# end of class BtwPanel

1;

