# generated by wxGlade 0.4cvs*** on Thu Aug 18 10:15:09 2005
# To get wxPerl visit http://wxPerl.sourceforge.net/

package main;

our $dbh;
our $config;
our $app;

use Wx 0.15 qw[:allclasses];
use strict;
package StdAccPanel;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;

use EB::Globals;
use EB::Finance;

# begin wxGlade: ::dependencies
use BalAccInput;
# end wxGlade

sub new {
	my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
	$parent = undef              unless defined $parent;
	$id     = -1                 unless defined $id;
	$title  = ""                 unless defined $title;
	$pos    = wxDefaultPosition  unless defined $pos;
	$size   = wxDefaultSize      unless defined $size;
	$name   = ""                 unless defined $name;

# begin wxGlade: StdAccPanel::new

	$style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME 
		unless defined $style;

	$self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
	$self->{sz_std_staticbox} = Wx::StaticBox->new($self, -1, "Koppelingen" );
	$self->{stdacc_main_staticbox} = Wx::StaticBox->new($self, -1, "" );
	$self->{main_panel} = Wx::ScrolledWindow->new($self, -1, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL|wxCLIP_CHILDREN);
	$self->{l_deb} = Wx::StaticText->new($self->{main_panel}, -1, "Debiteuren", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_deb} = BalAccInput->new($self->{main_panel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_crd} = Wx::StaticText->new($self->{main_panel}, -1, "Crediteuren", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_crd} = BalAccInput->new($self->{main_panel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_winst} = Wx::StaticText->new($self->{main_panel}, -1, "Winst", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_winst} = BalAccInput->new($self->{main_panel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_btw_ih} = Wx::StaticText->new($self->{main_panel}, -1, "BTW Inkoop Hoog", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_btw_ih} = BalAccInput->new($self->{main_panel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_btw_vh} = Wx::StaticText->new($self->{main_panel}, -1, "BTW Verkoop Hoog", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_btw_vh} = BalAccInput->new($self->{main_panel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_btw_il} = Wx::StaticText->new($self->{main_panel}, -1, "BTW Inkoop Laag", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_btw_il} = BalAccInput->new($self->{main_panel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_btw_vl} = Wx::StaticText->new($self->{main_panel}, -1, "BTW Verkoop Laag", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_btw_vl} = BalAccInput->new($self->{main_panel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{l_btw_ok} = Wx::StaticText->new($self->{main_panel}, -1, "BTW Betaald", wxDefaultPosition, wxDefaultSize, );
	$self->{tx_btw_ok} = BalAccInput->new($self->{main_panel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{b_apply} = Wx::Button->new($self, wxID_APPLY, "Apply");
	$self->{b_reset} = Wx::Button->new($self, wxID_UNDO, "Undo");
	$self->{l_inuse} = Wx::StaticText->new($self, -1, "Sommige gegevens zijn in gebruik en\nkunnen niet meer worden gewijzigd.", wxDefaultPosition, wxDefaultSize, );
	$self->{b_cancel} = Wx::Button->new($self, wxID_CLOSE, "Close");

	$self->__set_properties();
	$self->__do_layout();

	Wx::Event::EVT_TEXT($self, $self->{tx_deb}->GetId, \&OnChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_crd}->GetId, \&OnChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_winst}->GetId, \&OnChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_btw_ih}->GetId, \&OnChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_btw_vh}->GetId, \&OnChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_btw_il}->GetId, \&OnChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_btw_vl}->GetId, \&OnChanged);
	Wx::Event::EVT_TEXT($self, $self->{tx_btw_ok}->GetId, \&OnChanged);
	Wx::Event::EVT_BUTTON($self, wxID_APPLY, \&OnApply);
	Wx::Event::EVT_BUTTON($self, wxID_UNDO, \&OnReset);
	Wx::Event::EVT_BUTTON($self, wxID_CLOSE, \&OnClose);

# end wxGlade

	Wx::Event::EVT_IDLE($self, \&OnIdle);

	$self->refresh;
	my $ch = $self->changed;
	$self->{b_apply}->Enable($ch);
	$self->{b_reset}->Enable($ch);

	return $self;
}


sub __set_properties {
	my $self = shift;

# begin wxGlade: StdAccPanel::__set_properties

	$self->SetTitle("Koppelingen");
	$self->{main_panel}->SetScrollRate(10, 10);
	$self->{b_cancel}->SetFocus();
	$self->{b_cancel}->SetDefault();

# end wxGlade

	$self->{mew} = "stdw";

	$self->{busy} = 0;

	$self->{_open} = $dbh->do("SELECT adm_opened FROM Metadata")->[0];
}

sub __do_layout {
	my $self = shift;

# begin wxGlade: StdAccPanel::__do_layout

	$self->{stdacc_outer} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{stdacc_main}= Wx::StaticBoxSizer->new($self->{stdacc_main_staticbox}, wxVERTICAL);
	$self->{sz_buttons} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{sz_std}= Wx::StaticBoxSizer->new($self->{sz_std_staticbox}, wxVERTICAL);
	$self->{sz_std_buttons} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{sz_stdacc} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{sz_g_stdacc} = Wx::FlexGridSizer->new(8, 2, 3, 5);
	$self->{sz_g_stdacc}->Add($self->{l_deb}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{tx_deb}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{l_crd}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{tx_crd}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{l_winst}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{tx_winst}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{l_btw_ih}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{tx_btw_ih}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{l_btw_vh}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{tx_btw_vh}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{l_btw_il}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{tx_btw_il}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{l_btw_vl}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{tx_btw_vl}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{l_btw_ok}, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->Add($self->{tx_btw_ok}, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	$self->{sz_g_stdacc}->AddGrowableCol(1);
	$self->{sz_stdacc}->Add($self->{sz_g_stdacc}, 0, wxALL|wxEXPAND, 5);
	$self->{main_panel}->SetAutoLayout(1);
	$self->{main_panel}->SetSizer($self->{sz_stdacc});
	$self->{sz_stdacc}->Fit($self->{main_panel});
	$self->{sz_stdacc}->SetSizeHints($self->{main_panel});
	$self->{sz_std}->Add($self->{main_panel}, 1, wxEXPAND, 0);
	$self->{sz_std_buttons}->Add($self->{b_apply}, 0, wxADJUST_MINSIZE, 0);
	$self->{sz_std_buttons}->Add(20, 20, 1, wxADJUST_MINSIZE, 0);
	$self->{sz_std_buttons}->Add($self->{b_reset}, 0, wxADJUST_MINSIZE, 0);
	$self->{sz_std}->Add($self->{sz_std_buttons}, 0, wxALL|wxEXPAND, 5);
	$self->{stdacc_main}->Add($self->{sz_std}, 1, wxEXPAND, 0);
	$self->{sz_buttons}->Add($self->{l_inuse}, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 5);
	$self->{sz_buttons}->Add(5, 1, 1, wxEXPAND|wxADJUST_MINSIZE, 0);
	$self->{sz_buttons}->Add($self->{b_cancel}, 0, wxEXPAND|wxADJUST_MINSIZE|wxFIXED_MINSIZE, 5);
	$self->{stdacc_main}->Add($self->{sz_buttons}, 0, wxALL|wxEXPAND, 5);
	$self->{stdacc_outer}->Add($self->{stdacc_main}, 1, wxEXPAND, 0);
	$self->SetAutoLayout(1);
	$self->SetSizer($self->{stdacc_outer});
	$self->{stdacc_outer}->Fit($self);
	$self->{stdacc_outer}->SetSizeHints($self);
	$self->Layout();

# end wxGlade

	if ( $self->{_open} ) {
	    my $any = 0;
	    for ( @{$dbh->std_accs} ) {
		my $inuse = $dbh->do("SELECT COUNT(*) FROM Journal WHERE jnl_acc_id = ?",
				     $dbh->std_acc($_))->[0];
		if ( $inuse ) {
		    my $k = $_;
		    $self->{"tx_$k"}->Enable(0);
		    $self->{"l_$k"}->Enable(0);
		    $any++;
		}
	    }
	    $self->{l_inuse}->Show($any);
	}
	$self->Layout();

}

# wxGlade: StdAccPanel::OnIdle <event_handler>
sub OnIdle {
    my ($self) = @_;
    return unless $self->{_check_changed};
    $self->{_check_changed} = 0;
    my $ch = $self->changed;
    $self->{b_apply}->Enable($ch);
    $self->{b_reset}->Enable($ch);
}

sub refresh {
    my ($self) = @_;
    local($self->{busy}) = 1;
    my ($ih, $il, $vh, $vl, $ok) = @{$self}{qw(_btw_ih _btw_il _btw_vh _btw_vl _btw_ok)};
    my $accts = $dbh->accts;
    foreach my $acc ( @{$dbh->std_accs} ) {
	my $t = $dbh->std_acc($acc);
	$self->{"tx_$acc"}->SetValue($t . "   " . $accts->{$t});
    }
}

sub changed {
    my ($self) = @_;
    return 0 if $self->{busy};
    foreach my $acc ( @{$dbh->std_accs} ) {
	return 1 if (split(' ', $self->{"tx_$acc"}->GetValue))[0] != $dbh->std_acc($acc);
    }
    return 0;
}

# wxGlade: StdAccPanel::OnApply <event_handler>
sub OnApply {
    my ($self, $event) = @_;
    eval { $self->on_apply };
    if ( $@ ) {
	$dbh->rollback;
	Wx::MessageBox("Dat ging niet helemaal lekker.\n".$@,
		       "Oeps",
		       wxOK|wxICON_ERROR);

	# Error analysis: There's one single SQL in the eval.
	# Permanent data structures are only changed if the commit
	# succeeds. So the situation now is consistent.

    }
    else {
	$dbh->commit;
    }
    $self->{_check_changed}++;
}

sub on_apply {
    my ($self, $event) = @_;

    my @set;
    my $t;
    foreach my $acc ( @{$dbh->std_accs} ) {
	if ( ($t = (split(' ', $self->{"tx_$acc"}->GetValue))[0]) != $dbh->std_acc($acc) ) {
	    push(@set, "std_acc_$acc = $t");
	}
    }
    if ( @set ) {
	$dbh->sql_exec("UPDATE Standaardrekeningen SET ".
		       join(", ", @set))->finish;
	$dbh->commit;
	$dbh->std_acc("");	# flush cache
	$self->{_check_changed} = 1;
    }
}

# wxGlade: StdAccPanel::OnReset <event_handler>
sub OnReset {
    my ($self, $event) = @_;
    $self->refresh;
}

# wxGlade: StdAccPanel::OnClose <event_handler>
sub OnClose {
    my ($self, $event) = @_;
    if ( $self->changed ) {
	my $r = Wx::MessageBox("Er zijn nog wijzigingen, deze zullen verloren gaan.\n".
			       "Venster toch sluiten?",
			       "Annuleren",
			       wxYES_NO|wxNO_DEFAULT|wxICON_ERROR);
	return unless $r == wxYES;
	$self->refresh;
    }
    # Remember position and size.
    @{$config->get($self->{mew})}{qw(xpos ypos xwidth ywidth)} = ($self->GetPositionXY, $self->GetSizeWH);
    # Disappear.
    $self->Show(0);

}

# wxGlade: StdAccPanel::OnChanged <event_handler>
sub OnChanged {
    my ($self, $event) = @_;
    $self->{_check_changed} = 1;
}

# end of class StdAccPanel

1;

